"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskManager = void 0;
const debug_1 = __importDefault(require("debug"));
const common_1 = require("../common");
const debug = (0, debug_1.default)('cypress-allure:task-manager');
class TaskManager {
    constructor(options) {
        this.options = options;
        this.entityQueues = new Map();
    }
    addTask(entityId, task) {
        if (!entityId) {
            (0, common_1.logWithPackage)('error', `Cannot start start without entityId set\n Task: ${task.toString()}`);
            return;
        }
        let queue = this.entityQueues.get(entityId);
        if (!queue) {
            queue = { tasks: [], isFlushing: false };
            this.entityQueues.set(entityId, queue);
        }
        queue.tasks.push(task);
        debug(`Task added for entity "${entityId}", queue length: ${queue.tasks.length}`);
        // Start worker for this entity if not running
        this.processQueue(entityId).catch(err => {
            (0, common_1.logWithPackage)('error', `entity worker crashed ${entityId}: ${err.message}`);
        });
    }
    processQueue(entityId) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const queue = this.entityQueues.get(entityId);
            if (!queue) {
                (0, common_1.logWithPackage)('warn', `tasks for ${entityId} not found`);
                return;
            }
            if (queue.isFlushing)
                return; // already running
            queue.isFlushing = true;
            const maxParallel = 5;
            while (queue.tasks.length > 0) {
                const runningQueues = [...this.entityQueues.values()].filter(q => q.tasks.length > 0 || q.isFlushing).length;
                if (runningQueues >= maxParallel) {
                    yield new Promise(r => setTimeout(r, 50));
                    continue;
                }
                const task = queue.tasks.shift();
                if (!task) {
                    continue;
                }
                const TASK_TIMEOUT = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.taskTimeout) !== null && _b !== void 0 ? _b : 30000;
                let timeoutId;
                const timeoutPromise = () => new Promise((_, reject) => {
                    timeoutId = setTimeout(() => {
                        (0, common_1.logWithPackage)('error', `task for ${entityId} timed out`);
                        reject(new Error('task timeout'));
                    }, TASK_TIMEOUT);
                });
                const taskPromise = () => new Promise((res, rej) => {
                    return task()
                        .then(() => {
                        clearTimeout(timeoutId);
                        res('done');
                    })
                        .catch(err => {
                        clearTimeout(timeoutId);
                        (0, common_1.logWithPackage)('error', `task failed for ${entityId} ${err.message}\n${err.stack}`);
                        rej('task error');
                    });
                });
                yield Promise.race([timeoutPromise(), taskPromise()]).catch(err => {
                    (0, common_1.logWithPackage)('error', `task failed ${entityId}: ${err.message}`);
                    clearTimeout(timeoutId);
                });
            }
            queue.isFlushing = false;
        });
    }
    flushAllTasks() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            debug('Flushing all entity queues');
            const start = Date.now();
            const timeout = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.overallTimeout) !== null && _b !== void 0 ? _b : 60000;
            const hasRunningTasks = () => {
                const has = [...this.entityQueues.values()].some(q => q.tasks.length > 0 || q.isFlushing);
                return has;
            };
            while (hasRunningTasks()) {
                yield new Promise(r => setTimeout(r, 50));
                if (Date.now() - start > timeout) {
                    (0, common_1.logWithPackage)('error', `flushAllTasks exceeded ${timeout / 1000}s, exiting`);
                    break;
                }
            }
        });
    }
    flushAllTasksForQueue(entityId) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            debug(`Flushing all tasks for queue ${entityId}`);
            const start = Date.now();
            const queue = this.entityQueues.get(entityId);
            const timeout = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.overallTimeout) !== null && _b !== void 0 ? _b : 60000;
            if (!queue) {
                (0, common_1.logWithPackage)('warn', `tasks for ${entityId} not found`);
                return;
            }
            while (queue.tasks.length > 0 || queue.isFlushing) {
                yield new Promise(r => setTimeout(r, 50));
                if (Date.now() - start > timeout) {
                    (0, common_1.logWithPackage)('error', `flushAllTasksForQueue exceeded ${timeout / 1000}s, exiting`);
                    break;
                }
            }
        });
    }
}
exports.TaskManager = TaskManager;
