export declare const ARGS_TRIM_AT = 200;
export declare const COMMAND_REQUEST = "request";
export type CommandLog = {
    attributes?: {
        name?: string;
        displayName?: string;
        commandLogId?: string;
        consoleProps?: () => any;
        message?: string;
        error?: any;
        groupStart?: boolean;
        groupEnd?: boolean;
        emitOnly?: boolean;
    };
};
export type CyLog = {
    id?: string;
    name?: string;
    displayName?: string;
    commandLogId?: string;
    consoleProps?: () => any;
    message?: string;
    chainerId?: string;
    error?: any;
    err?: any;
    end?: boolean;
    ended?: boolean;
    state?: string;
    groupLevel?: number;
    groupStart?: boolean;
    groupEnd?: boolean;
    emitOnly?: boolean;
    snapshot?: boolean;
};
export type CommandT = {
    state?: string;
    attributes?: {
        name?: string;
        args?: any;
        logs?: CommandLog[];
        subject?: any;
        prev?: CommandT;
        next?: CommandT;
    };
};
export declare const ignoreAllCommands: (ignoreCommands: () => string[]) => {
    includes(ttl: string): boolean;
};
export declare const logNameFn: (attribute: any) => any;
export declare const filterCommandLog: (command: CommandT, ignoreCommands: () => string[]) => CommandLog[];
export declare const commandLogs: (command: CommandT) => CommandLog[];
export declare const withTry: (message: string, callback: () => void) => void;
export declare const stepMessage: (name: string, args: string | undefined) => string;
export declare const stringify: (args: any, isJSON: boolean, indent?: string) => string;
export declare const requestName: (url: string, method: string) => string;
export declare const commandParams: (command: CommandT) => {
    name: any;
    args: string[];
    message: string;
    isLog: boolean;
    state: string;
};
