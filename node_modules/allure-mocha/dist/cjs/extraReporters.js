"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableExtraReporters = exports.doneAll = void 0;
var Mocha = _interopRequireWildcard(require("mocha"));
var _nodeModule = require("node:module");
var _nodePath = _interopRequireDefault(require("node:path"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// There is no global require in ESM, and we can't use dynamic import (which returns a promise) because it's called from the reporter's constructor; therefore, it must be synchronous.
var localRequire = typeof require === "function" ? require : (0, _nodeModule.createRequire)(require('url').pathToFileURL(__filename).toString());
var enableExtraReporters = (runner, options, extraReportersConfig) => {
  var extraReporterEntries = Array.from(generateCanonicalizedReporterEntries(extraReportersConfig));
  var loadedReporterEntries = loadReporters(extraReporterEntries);
  return instantiateReporters(runner, options, loadedReporterEntries);
};
exports.enableExtraReporters = enableExtraReporters;
var doneAll = (reporters, failures, fn) => {
  var doneCallbacks = collectDoneCallbacks(reporters);
  var callbacksToWait = doneCallbacks.length + 1;
  var onReporterIsDone = () => {
    if (--callbacksToWait === 0) {
      fn === null || fn === void 0 || fn(failures);
    }
  };
  for (var done of doneCallbacks) {
    done(failures, onReporterIsDone);
  }
  onReporterIsDone(); // handle the synchronous completion
};
exports.doneAll = doneAll;
var generateCanonicalizedReporterEntries = function* generateCanonicalizedReporterEntries(reporters) {
  if (reporters) {
    if (!(reporters instanceof Array)) {
      yield [reporters, {}];
    } else {
      if (isReporterArrayEntry(reporters)) {
        yield resolveReporterArrayEntry(reporters);
      } else {
        yield* reporters.map(e => {
          return resolveReporterEntry(e);
        });
      }
    }
  }
};
var loadReporters = reporterEntries => reporterEntries.map(_ref => {
  var [moduleOrCtor, options] = _ref;
  return [loadReporterModule(moduleOrCtor), options];
});
var instantiateReporters = (runner, options, entries) => {
  var reporters = [];
  for (var [Reporter, reporterOptions] of entries) {
    var optionsForReporter = _objectSpread(_objectSpread({}, options), {}, {
      reporterOptions,
      // eslint-disable-next-line quote-props
      "reporterOption": reporterOptions,
      "reporter-option": reporterOptions
    });
    reporters.push(new Reporter(runner, optionsForReporter));
  }
  return reporters;
};
var collectDoneCallbacks = reporters => {
  var doneCallbacks = [];
  for (var reporter of reporters) {
    if (reporter.done) {
      doneCallbacks.push(reporter.done.bind(reporter));
    }
  }
  return doneCallbacks;
};
var isReporterArrayEntry = reporters => {
  var [maybeReporterModuleOrCtor, maybeReporterOptions = {}] = reporters;
  return !(maybeReporterModuleOrCtor instanceof Array) && typeof maybeReporterOptions === "object" && !(maybeReporterOptions instanceof Array);
};
var loadReporterModule = moduleOrCtor => {
  if (typeof moduleOrCtor === "string") {
    var builtInReporters = Mocha.reporters;
    var builtInReporterCtor = builtInReporters[moduleOrCtor];
    if (builtInReporterCtor) {
      return builtInReporterCtor;
    }
    var reporterModulePath = getReporterModulePath(moduleOrCtor);
    try {
      return localRequire(reporterModulePath);
    } catch (e) {
      throw new Error("Can't load the '".concat(moduleOrCtor, "' reporter from ").concat(reporterModulePath, ": ").concat(e.message));
    }
  }
  if (typeof moduleOrCtor !== "function") {
    throw new Error("A reporter value must be a string or a constructor. Got ".concat(typeof moduleOrCtor));
  }
  return moduleOrCtor;
};
var getReporterModulePath = module => {
  try {
    return localRequire.resolve(module);
  } catch (e) {}
  try {
    return _nodePath.default.resolve(module);
  } catch (e) {
    throw new Error("Can't resolve the '".concat(module, "' reporter's path: ").concat(e.message));
  }
};
var resolveReporterEntry = reporterEntry => {
  return reporterEntry instanceof Array ? resolveReporterArrayEntry(reporterEntry) : [reporterEntry, {}];
};
var resolveReporterArrayEntry = reporterEntry => {
  if (reporterEntry.length < 1 || reporterEntry.length > 2) {
    throw new Error("If an extra reporter entry is an array, it must contain one or two elements. ".concat(reporterEntry.length, " found"));
  }
  return reporterEntry.length === 1 ? [...reporterEntry, {}] : [...reporterEntry];
};
//# sourceMappingURL=extraReporters.js.map